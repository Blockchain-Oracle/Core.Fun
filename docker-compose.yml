version: '3.8'

services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: core-meme-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: core-meme-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - core-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U core_user -d core_meme_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Core API Service
  core-api:
    build:
      context: .
      dockerfile: backend/core-api-service/Dockerfile
    container_name: core-api-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
      CORE_MAINNET_RPC: ${CORE_MAINNET_RPC:-https://rpc.coredao.org}
      CORE_TESTNET_RPC: ${CORE_TESTNET_RPC:-https://rpc.test2.btcs.network}
      CORE_SCAN_MAINNET_API: ${CORE_SCAN_MAINNET_API:-https://openapi.coredao.org/api}
      CORE_SCAN_TESTNET_API: ${CORE_SCAN_TESTNET_API:-https://api.test2.btcs.network/api}
      CORE_SCAN_API_KEY: ${CORE_SCAN_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./backend/core-api-service/logs:/app/backend/core-api-service/logs
      - ./backend/core-api-service/.env:/app/backend/core-api-service/.env:ro
    # Use Dockerfile CMD (node dist/main.js) to start; avoid build step in runtime image

  # Trading Engine
  trading-engine:
    build:
      context: .
      dockerfile: backend/trading-engine/Dockerfile
    container_name: core-trading-engine
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      TRADING_ENGINE_PORT: 3003
      NETWORK: ${NETWORK:-testnet}
      CORE_RPC_URL: ${CORE_RPC_URL}
      JWT_SECRET: ${JWT_SECRET:-core_meme_jwt_secret_2024_secure_key_for_auth}
      SIGNATURE_SECRET: ${SIGNATURE_SECRET:-core_meme_signature_secret_2024_secure_key}
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./backend/trading-engine/.env:/app/backend/trading-engine/.env:ro
    # Use Dockerfile CMD (node dist/server.js) to start; avoid build step in runtime image

  # WebSocket Server
  websocket:
    build: 
      context: .
      dockerfile: backend/websocket/Dockerfile
    container_name: core-websocket
    ports:
      - "8081:8081"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      WS_PORT: 8081
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CORE_RPC_URL: ${CORE_TESTNET_RPC:-https://rpc.test2.btcs.network}
      MEME_FACTORY_ADDRESS: ${MEME_FACTORY_TESTNET:-0x04242CfFdEC8F96A46857d4A50458F57eC662cE1}
      JWT_SECRET: ${JWT_SECRET:-core_meme_jwt_secret_2024_secure_key_for_auth}
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001,http://localhost:3002
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      blockchain-monitor:
        condition: service_started
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./backend/websocket/logs:/app/backend/websocket/logs

  # Blockchain Monitor
  blockchain-monitor:
    build:
      context: .
      dockerfile: backend/blockchain-monitor/Dockerfile
    container_name: core-blockchain-monitor
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NETWORK: ${NETWORK:-testnet}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
      CORE_MAINNET_RPC: ${CORE_MAINNET_RPC:-https://rpc.coredao.org}
      CORE_TESTNET_RPC: ${CORE_TESTNET_RPC:-https://rpc.test2.btcs.network}
      CORE_SCAN_MAINNET_API: ${CORE_SCAN_MAINNET_API:-https://openapi.coredao.org/api}
      CORE_SCAN_TESTNET_API: ${CORE_SCAN_TESTNET_API:-https://api.test2.btcs.network/api}
      CORE_SCAN_API_KEY: ${CORE_SCAN_API_KEY}
      MEME_FACTORY_TESTNET: ${MEME_FACTORY_TESTNET:-0x04242CfFdEC8F96A46857d4A50458F57eC662cE1}
      MEME_FACTORY_MAINNET: ${MEME_FACTORY_MAINNET}
      STAKING_TESTNET: ${STAKING_TESTNET:-0x95F1588ef2087f9E40082724F5Da7BAD946969CB}
      STAKING_MAINNET: ${STAKING_MAINNET}
      PLATFORM_TOKEN_TESTNET: ${PLATFORM_TOKEN_TESTNET:-0x96611b71A4DE5B8616164B650720ADe10948193F}
      PLATFORM_TOKEN_MAINNET: ${PLATFORM_TOKEN_MAINNET}
      TREASURY_ADDRESS: ${TREASURY_ADDRESS:-0xe397a72377F43645Cd4DA02d709c378df6e9eE5a}
      JWT_SECRET: ${JWT_SECRET:-core_meme_jwt_secret_2024_secure_key_for_auth}
      SIGNATURE_SECRET: ${SIGNATURE_SECRET:-core_meme_signature_secret_2024_secure_key}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./backend/blockchain-monitor/logs:/app/backend/blockchain-monitor/logs
      - ./backend/blockchain-monitor/.env:/app/backend/blockchain-monitor/.env:ro

  # Telegram Bot
  telegram-bot:
    build:
      context: .
      dockerfile: telegram-bot/Dockerfile
    container_name: core-telegram-bot
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
      WEBSOCKET_URL: ws://websocket:8080
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      ADMIN_TELEGRAM_ID: ${ADMIN_TELEGRAM_ID}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      JWT_SECRET: ${JWT_SECRET:-core_meme_jwt_secret_2024_secure_key_for_auth}
      SIGNATURE_SECRET: ${SIGNATURE_SECRET:-core_meme_signature_secret_2024_secure_key}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      websocket:
        condition: service_started
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./telegram-bot/logs:/app/telegram-bot/logs
      - ./telegram-bot/.env:/app/telegram-bot/.env:ro

networks:
  core-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: