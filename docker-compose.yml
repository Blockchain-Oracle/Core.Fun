services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: core-meme-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - core-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: core-meme-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - core-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U core_user -d core_meme_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Service (Main Backend)
  api:
    build:
      context: .
      dockerfile: backend/api/Dockerfile
    container_name: core-api
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3001
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
      CORE_RPC_URL: ${CORE_TESTNET_RPC:-https://1114.rpc.thirdweb.com}
      MEME_FACTORY_ADDRESS: ${MEME_FACTORY_ADDRESS:-0x0eeF9597a9B231b398c29717e2ee89eF6962b784}
      JWT_SECRET: ${JWT_SECRET:-core_meme_jwt_secret_2024}
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET:-core_meme_encryption_secret_2024}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./backend/api/logs:/app/backend/api/logs

  # Blockchain Monitor
  blockchain-monitor:
    build:
      context: .
      dockerfile: backend/blockchain-monitor/Dockerfile
    container_name: core-blockchain-monitor
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NETWORK: ${NETWORK:-testnet}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
      CORE_TESTNET_RPC: ${CORE_TESTNET_RPC:-https://1114.rpc.thirdweb.com}
      MEME_FACTORY_ADDRESS: ${MEME_FACTORY_ADDRESS:-0x0eeF9597a9B231b398c29717e2ee89eF6962b784}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./backend/blockchain-monitor/logs:/app/backend/blockchain-monitor/logs

  # WebSocket Server
  websocket:
    build: 
      context: .
      dockerfile: backend/websocket/Dockerfile
    container_name: core-websocket
    ports:
      - "8081:8081"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      WS_PORT: 8081
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CORE_RPC_URL: ${CORE_TESTNET_RPC:-https://1114.rpc.thirdweb.com}
      MEME_FACTORY_ADDRESS: ${MEME_FACTORY_ADDRESS:-0x0eeF9597a9B231b398c29717e2ee89eF6962b784}
      JWT_SECRET: ${JWT_SECRET:-core_meme_jwt_secret_2024}
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      blockchain-monitor:
        condition: service_started
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./backend/websocket/logs:/app/backend/websocket/logs

  # Telegram Bot
  telegram-bot:
    build:
      context: .
      dockerfile: telegram-bot/Dockerfile
    container_name: core-telegram-bot
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: core_meme_platform
      POSTGRES_USER: core_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-core_secure_pass_2024}
      API_URL: http://api:3001
      WEBSOCKET_URL: ws://websocket:8081
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      ADMIN_TELEGRAM_IDS: ${TELEGRAM_ADMIN_IDS}
      JWT_SECRET: ${JWT_SECRET:-core_meme_jwt_secret_2024}
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET:-core_meme_encryption_secret_2024}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api:
        condition: service_started
      websocket:
        condition: service_started
    restart: unless-stopped
    networks:
      - core-network
    volumes:
      - ./telegram-bot/logs:/app/telegram-bot/logs

networks:
  core-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: